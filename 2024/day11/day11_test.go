package day11

import (
	"fmt"
	"math/big"
	"testing"
)

const example = `125 17`

func TestDay11(t *testing.T) {
	var tests = []struct {
		blink int
		want  int64
	}{
		{6, 22},
		{25, 55312},
	}
	for _, tt := range tests {
		t.Run(fmt.Sprintf("day11(%d)", tt.blink), func(t *testing.T) {
			res := day11(example, tt.blink)
			if res.Cmp(big.NewInt(tt.want)) != 0 {
				t.Fatalf("got %d, want %d", res, tt.want)
			}
		})
	}
}

func BenchmarkDay11(b *testing.B) {
	tests := []int{6, 12, 25, 50, 100}
	for _, blinks := range tests {
		b.Run(fmt.Sprintf("day11(%d)", blinks), func(b *testing.B) {
			for range b.N {
				day11(example, blinks)
			}
		})
	}
}

// https://www.reddit.com/r/adventofcode/comments/1hby8fj/2024_day11_how_many_stones_after_a_1000_blinks/
var extraTests = []struct {
	input string
	blink int
	want  string
}{
	{"0 1 10 99 999", 1000, "124465423115698698241002749215242963330541240841239706087368750747581612400449476054376217541324060897215883331091287664151971850646039425643561888797209219698469026829205306193261296"},
	{"0 1 10 99 999", 10000, "8405347154475288550086569701453917286285408617085431476533044627516504278423240594787161465010513637504821746708286697125692629319837535789223067770872169777885206982729545309786775505880588592593815361611562159066555732453437285424074759501296434575401771239222123359179040679398320876541343040361783047409058552999524854187678295937077137095917563573058105798999372108305764554797016215394370285719822709010030535685298111995730269881718831785846717238267652883876825444645455318069126258006035205066222962720671677907073117563218183775489025639490536116431543569249466516373354367863091173382560871299144849141497873320641774066792255447335771875877449329759168678652652417443401969768595637273373797577796194878361575606044879328813412637299675413121849020099815078180956312156094096720955462109939054342695113892974865987759559616163296548341982546195267607787205203198882912757604330063749040252432205480973578765708730437515176666725694588660078314357187067597856208865871624327458860729779089619095093435004985492458819813301425283650879695205062581801251036478996384565673156168704137246551016748909632563539775044534777105734992743857832507149813039880670173422683632439790879167816187485777616405814637590788756016453628373751926640863047250953338822593186921483345624288664747332978304797005920479706834849998738077390335299560332917322268149310105504467397522597878736107636306900552817465875041364327007337878598212309076631266707142624833708198628881484433739029554442874515850825769022631599956645795108732247786499899248115236563287415393978472923262775352165719712758847622510976511854792872151630997896119918817516779585099863259674126189257609584667837313142740632389631109578925898984177554031008829737900102314367811374585531247175016789671971245583385190519745262344861678168183092522767576760"},
}

func TestDay11Extra(t *testing.T) {
	for _, tt := range extraTests {
		t.Run(fmt.Sprintf("day11Extra(%d)", tt.blink), func(t *testing.T) {
			res := day11(tt.input, tt.blink)
			want := big.NewInt(0)
			want.SetString(tt.want, 10)
			if res.Cmp(want) != 0 {
				t.Fatalf("got %d, want %s", res, tt.want)
			}
		})
	}
}

func BenchmarkDay11Extra(b *testing.B) {
	for _, tt := range extraTests {
		b.Run(fmt.Sprintf("day11Extra(%d)", tt.blink), func(b *testing.B) {
			for range b.N {
				day11(tt.input, tt.blink)
			}
		})
	}
}
